{"version":3,"sources":["GlobalStyle.js","components/Rules.js","components/SHIPS.js","logic/Ship.js","logic/Gameboard.js","logic/Player.js","ItemTypes.js","components/Tile.js","components/PlacingInstructions.js","components/Board.js","components/ShipDisplay.js","components/ShipsContainer.js","components/ShowPiece.js","components/ShipBank.js","components/EnemyShip.js","components/ComputerBank.js","components/AttackIndicator.js","components/Legend.js","components/PrimaryGame.js","components/GameOver.js","components/Header.js","App.js","index.js"],"names":["GlobalStyle","createGlobalStyle","RULES","H1","styled","h1","Step","div","Button","Rules","props","steps","map","step","key","indexOf","onClick","handleClick","SHIPS","name","id","length","color","Ship","direction","positions","Array","fill","hit","index","isSunk","every","spot","Gameboard","ships","board","i","j","placeShip","ship","row","col","coords","desiredPlacement","isOnBoard","isAvailable","isNewShip","forEach","coord","position","push","find","shipInfo","getShip","item","coordinates","receiveHit","cell","parseInt","receiveMiss","areAllSunk","allShipsPlaced","placeRandomShips","shipsData","shipObject","orientation","Math","random","shipsCount","floor","reset","Player","attackRecord","hits","maybes","isLegal","gameboard","guess","addToMaybes","generateRandom","randomGuess","opposite","isRepeatAttack","some","generatePlay","shift","attack","ItemTypes","Cell","content","square","test","boardId","Tile","useDrop","accept","drop","handleDrop","y","x","collect","monitor","isOver","ref","Container","PlacingInstructions","BoardContainer","Board","playerTurn","tiles","generateBoard","computer","ShipContainer","pShips","includes","selectedId","useDrag","type","isDragging","drag","setSelectedId","setLength","generateShip","ShipRow","ShipsContainer","toUpperCase","PieceBox","ShowPiece","useState","setPosition","onMouseDown","handleMouseDown","generateTiles","BankContainer","H2","h2","OrientationButtons","button","horizontal","vertical","ShipBank","setOrientation","sunk","EnemyShip","TrackingContainer","ComputerBank","enemyShips","shipData","Indicator","AttackIndicator","Box","blue","Legend","red","GameContainer","PrimaryGame","player","setPlayer","setComputer","boardP","setBoardP","boardC","setBoardC","setPlayerTurn","setPShips","useEffect","prevBoard","prevPlayer","prevComputer","makeMove","tempBoard","tempShips","computerPlay","setTimeout","endGame","GameOver","winner","Header","Wrapper","App","viewRules","setViewRules","playGame","setPlayGame","gameOver","setGameOver","setWinner","champion","ReactDOM","render","DndProvider","backend","Backend","document","getElementById"],"mappings":"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","file":"static/js/main.51a43934.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  body, html {\n    font-size: 20px;\n    box-sizing: border-box;\n    font-family: 'Londrina Solid', sans-serif;\n    height: 100%;\n  }\n\n  body {\n    margin: 0;\n    background: linear-gradient(to bottom, #7f7fd5, #86a8e7, #91eae4);\n    background-repeat: no-repeat;\n    background-attachment: fixed;\n  }\n\n  * {\n    box-sizing: border-box;\n    user-select: none;\n    font-family: 'Londrina Solid', sans-serif;\n  }\n`;\n\nexport default GlobalStyle;","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst RULES = [\n  'Welcome to Battleship! You will be playing against a computer. To setup the game, each player places five ships of varying lengths on a personal gameboard by clicking or dragging. Ships can be positioned horizontally or vertically on the board. They may touch, but may not occupy the same area. All ships must remain within the gameboard boundaries.',\n\n  'Players alternate taking turns. On a turn, a player attacks the opponent\\'s gameboard by clicking on an unoccupied square. If the attacks hits an enemy ship, the square will turn red. Otherwise, the attack is considered a miss and the square will turn grey.',\n\n  'When a player sinks an enemy ship, the player will be notified. The game ends once one player has destroyed all enemy ships.'\n];\n\n// Styled components\nconst H1 = styled.h1`\n  font-size: 2em;\n`;\n\nconst Step = styled.div`\n  text-align: center;\n  display: flex;\n  justify-content: center;\n  align-content: center;\n  width: 70%;\n  margin: 10px 0;\n  padding: 10px;\n  line-height: 1.2em;\n  letter-spacing: 1px;\n  background: #2519fc;\n  color: white;\n  font-weight: 300;\n  border-radius: 30px;\n  border: 3px solid black;\n\n  @media only screen and (min-width: 768px) {\n    width: 50%;\n  }\n\n  @media only screen and (min-width: 1024px) {\n    width: 40%;\n  }\n`;\n\nconst Button = styled.div`\n  padding: 10px;\n  border: 3px solid black;\n  border-radius: 5px;\n  cursor: pointer;\n  background: #c6c3ff;\n`;\n\n// Function component\nconst Rules = (props) => {\n  const steps = RULES.map(step => {\n    return <Step key={RULES.indexOf(step)}>{step}</Step>\n  })\n\n  return (\n    <>\n      <H1>RULES</H1>\n      {steps}\n      <Button onClick={props.handleClick}>PLAY</Button>\n    </>\n  )\n}\n\n// Type validation\nRules.propTypes = {\n  handleClick: PropTypes.func\n}\n\nexport default Rules;\n","const SHIPS = [\n  { name: \"carrier\",    id: 0, length: 5, color: '#b3ff00' },\n  { name: \"battleship\", id: 1, length: 4, color: '#6aa06f' },\n  { name: \"cruiser\",    id: 2, length: 3, color: '#7cac0c' },\n  { name: \"submarine\",  id: 3, length: 3, color: '#afffb2' },\n  { name: \"destroyer\",  id: 4, length: 2, color: '#aa8600' }\n];\n\nexport default SHIPS;\n","const Ship = (id, length, direction) => {\n  const positions = Array(length).fill(null);\n\n  const hit = (index) => {\n    positions[index] = 'x';\n  };\n\n  const isSunk = () => {\n    return positions.every(spot => spot === 'x');\n  };\n\n  return {\n    id,\n    length,\n    direction,\n    positions,\n    hit,\n    isSunk\n  };\n}\n\nexport default Ship;\n\n\n","import shipsData from '../components/SHIPS.js';\nimport Ship from './Ship.js';\n\nconst Gameboard = (id) => {\n  let ships = [];\n  let board = [];\n  for(let i = 0; i < 10; i++) {\n    board[i] = [];\n    for(let j = 0; j < 10; j++) {\n      board[i][j] = null;\n    }\n  };\n\n  const placeShip = (ship, row, col) => {\n    const { length, direction } = ship;\n    const coords = desiredPlacement(length, row, col, direction);\n    if (isOnBoard(coords) && isAvailable(coords) && isNewShip(ship)) {\n      coords.forEach((coord, position) => {\n        const [row, col] = coord;\n        board[row][col] = `${ship.id}${position}`;\n      })\n      ships.push({ ship, coords })\n    } \n  };\n\n  const placeRandomShips = () => {\n    shipsData.forEach(shipObject => {\n      const orientation = Math.random() < 0.5 ? 'horizontal' : 'vertical';\n      const ship = Ship(shipObject.id, shipObject.length, orientation)\n      let shipsCount = ships.length;\n\n      while (shipsCount === ships.length) {\n        const row = Math.floor(Math.random() * 10);\n        const col = Math.floor(Math.random() * 10);\n        placeShip(ship, row, col);\n      }\n    })\n  };\n\n  const allShipsPlaced = () => {\n    return ships.length === 5 ? true : false;\n  };\n\n  const receiveMiss = (row, col) => {\n    if (board[row][col] === null) {\n      board[row][col] = 'M';\n      return true;\n    }\n    return false;\n  };\n  \n  const receiveHit = (row, col) => {\n    const cell = board[row][col];\n    if (cell !== 'M' && cell !== 'X' && cell !== null) {\n      const id = parseInt(cell[0]);\n      const index = parseInt(cell[1]);\n      const ship = getShip(id);\n      ship.hit(index);\n      board[row][col] = 'X';\n      return true;\n    }\n    return false;\n  };\n  \n  const reset = () => {\n    for (let i = 0; i < 10; i++) {\n      board[i] = [];\n      for (let j = 0; j < 10; j++) {\n        board[i][j] = null;\n      }\n    }\n    ships = [];\n  };\n\n  // PRIVATE \n  const isNewShip = (ship) => {\n    if (ships.find(shipInfo => shipInfo.ship.id === ship.id)) {\n      return false;\n    }\n    return true;\n  };\n  \n  const areAllSunk = () => {\n    return ships.length > 0 && \n           ships.every(shipInfo => {\n             const { ship } = shipInfo;\n             return ship.isSunk();\n           })\n  };\n\n  const getShip = (id) => {\n    const foundShip = ships.find(item => item.ship.id === id);\n    return foundShip.ship;\n  };\n  \n  // returns array of placement coordinates ignoring any obstacles\n  const desiredPlacement = (length, row, col, direction) => {\n    let coordinates = [];\n    for(let i = 0; i < length; i ++) {\n      (direction === 'horizontal') ? \n        coordinates.push([row, col + i]) :\n        coordinates.push([row + i, col]);\n    }\n    return coordinates;\n  };\n\n  const isOnBoard = (coords) => {\n    return coords.every(coord => {\n      return (coord[0] >= 0 && coord[0] < 10) && (coord[1] >= 0 && coord[1] < 10)\n    })\n  };\n\n  const isAvailable = (coords) => {\n    return coords.every(coord => {\n      return board[coord[0]][coord[1]] === null;\n    })\n  };\n\n  return {\n    id,\n    board,\n    ships,\n    placeShip,\n    receiveHit,\n    receiveMiss,\n    areAllSunk,\n    allShipsPlaced,\n    placeRandomShips,\n    reset\n  }\n}\n\nexport default Gameboard;\n\n\n","const Player = (name) => {\n  let attackRecord = [];\n  let hits = [];\n  let maybes = [];\n\n  // Generates random guess [even/odd, odd]\n  const generatePlay = (board) => {\n    let guess;\n    while (!guess) {\n      if (maybes.length === 0) {\n        do {\n          guess = generateRandom();\n        } while (isRepeatAttack(guess) || !isLegal(board, guess));\n      } else {\n        do {\n          guess = maybes.shift();\n          if (!guess) break;\n        } while (isRepeatAttack(guess));\n      }\n    }\n    return guess;\n  };\n  \n  const attack = (gameboard, coords) => {\n    const [row, col] = coords;\n    if (gameboard.receiveHit(row, col)) {\n      attackRecord.push(coords);\n      hits.push(coords);\n      addToMaybes(coords);\n    } else if (gameboard.receiveMiss(row, col)) {\n      attackRecord.push(coords);\n    } else {\n      return false;\n    }\n    return true;\n  };\n  \n  const reset = () => {\n    attackRecord = [];\n    hits = [];\n    maybes = [];\n  };\n\n  // PRIVATE\n\n  const isLegal = (gameboard, guess) => {\n    const [row, col] = guess;\n    return (gameboard[row][col] === 'M') || \n           (gameboard[row][col] === 'X') ?\n           false : true;\n  };\n\n  const addToMaybes = coords => {\n    const [row, col] = coords;\n    if (row - 1 >= 0) maybes.push([row - 1, col]);\n    if (col + 1 < 10) maybes.push([row, col + 1]);\n    if (row + 1 < 10) maybes.push([row + 1, col]);\n    if (col - 1 >= 0) maybes.push([row, col - 1]);\n  };\n\n  const generateRandom = () => {\n    let randomGuess = [];\n    let col;\n    randomGuess.push(Math.floor(Math.random() * 10));\n    const opposite = randomGuess[0] % 2 === 0 ? 0 : 1;\n    do {\n      col = Math.floor(Math.random() * 10);\n    } while (col % 2 === opposite);\n    randomGuess.push(col);\n    return randomGuess;\n  };\n\n  const isRepeatAttack = guess => {\n    return attackRecord.some(coord => {\n      return coord[0] === guess[0] && coord[1] === guess[1];\n    });\n  };\n\n  return {\n    name,\n    generatePlay,\n    attack,\n    reset,\n  }\n}\n\nexport default Player;","export const ItemTypes = {\n  SHIP: 'ship',\n};","import React from 'react';\nimport styled from 'styled-components';\nimport SHIPS from './SHIPS.js';\nimport PropTypes from 'prop-types';\nimport { ItemTypes } from '../ItemTypes.js';\nimport { useDrop } from 'react-dnd';\n\n// Styled component\nconst Cell = styled.div`\n  height: 100%;\n  width: 100%;\n  border: 1px solid black;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: default;\n  cursor: ${props => props.content === 'true' ? 'default' : 'pointer'};\n  background: ${props => {\n    if (props.square === 'X') return 'radial-gradient(closest-side, red, pink)';\n    if (props.square === 'M') return 'radial-gradient(closest-side, blue, lightblue)';\n    if (/[0-9]{2}/.test(props.square) && props.boardId === 0) return SHIPS[parseInt(props.square[0])].color;\n    return 'none';\n  }};\n`;\n\nconst Tile = (props) => {\n  const [, drop] = useDrop({\n    accept: ItemTypes.SHIP,\n    drop: (item) => props.handleDrop([props.y, props.x], props.id, item.position),\n    collect: monitor => ({\n      isOver: !!monitor.isOver(),\n    }) \n  })\n\n  return (\n    <Cell \n      ref={drop}\n      content={props.content}\n      square={props.square}\n      boardId={props.boardId}\n      onClick={() => props.handleClick([props.y, props.x], props.id)}\n    />\n  )\n}\n\nTile.propTypes = {\n  content: PropTypes.string,\n  square: PropTypes.any,\n  boardId: PropTypes.number,\n  handleClick: PropTypes.func,\n  handleDrop: PropTypes.func,\n  x: PropTypes.number,\n  y: PropTypes.number,\n  id: PropTypes.number\n}\n\nexport default Tile;","import React from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  padding: 5px;\n  border: 1px solid black;\n  background: white;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  font-weight: 300;\n  p {\n    margin: 4px 0;\n  }\n\n  @media only screen and (min-width: 768px) {\n    font-size: 1.3em;\n  }\n`;\n\nconst PlacingInstructions = () => {\n  return (\n    <Container>\n      <p>Click to select a ship from the Ship Bank.</p>\n      <p>Choose horizontal or vertical.</p>\n      <p>\n        If using a touchscreen device, you must click a square on your board\n        to add the piece (the emoji will land where you click).\n      </p>\n      <p>\n        If using a mouse, you can also drag the piece from the dotted box onto\n        your board.\n      </p>\n    </Container>\n  );\n}\n\nexport default PlacingInstructions;","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from \"prop-types\";\nimport Tile from './Tile.js';\nimport PlacingInstructions from './PlacingInstructions.js';\n\n// Styled component\nconst BoardContainer = styled.div`\n  position: relative;\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  grid-template-rows: repeat(10, 1fr);\n  width: 15em;\n  height: 15em;\n  border: 8px solid black;\n  margin: 5px;\n  background: ${props => {\n    return props.board.id === 0 ? \"lightgrey\" : \"#f1f3ff\";\n  }};\n  grid-area: ${props => {\n    return props.board.id === 0 ? '2 / 2 / 3 / 3' : '1 / 2 / 2 / 3';\n  }};\n\n  @media only screen and (min-width: 768px) {\n    width: 20em;\n    height: 20em;\n  }\n`;\n\n// Function component\nconst Board = (props) => {\n  const board = props.board;\n\n  const generateBoard = (boardId) => {\n    let tiles = [];\n    board.board.forEach((row, y) => {\n      row.forEach((square, x) => {\n        tiles.push(\n          <Tile \n            key={`${y}${x}`}\n            x={x}\n            y={y}\n            handleClick={props.handleClick}\n            content={square === 'X' || square === 'M' ? 'true' : 'false'}\n            square={square}\n            boardId={boardId}\n            id={board.id}\n            handleDrop={props.handleDrop}\n          />\n        )\n      })\n    })\n    return tiles;\n  }\n\n  return (\n    <BoardContainer \n      board={props.board}\n      playerTurn={props.playerTurn}\n    >\n      {generateBoard(props.board.id)}\n      {props.computer && !props.board.allShipsPlaced() && <PlacingInstructions />}\n    </BoardContainer>\n  )\n}\n\n// Type validation\nBoard.propTypes = {\n  board: PropTypes.object,\n  handleClick: PropTypes.func,\n  handleDrop: PropTypes.func,\n  pShips: PropTypes.array,\n  playerTurn: PropTypes.bool,\n  computer: PropTypes.any,\n}\n\nexport default Board;","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport SHIPS from './SHIPS.js';\nimport { ItemTypes } from '../ItemTypes.js';\nimport { useDrag } from 'react-dnd';\n\n// Styled components\nconst ShipContainer = styled.div`\n  display: flex;\n  align-items: center;\n  border: 2px solid black;\n  background: ${props => {\n    if (props.pShips.includes(props.id)) {\n      return 'none'; \n    } else {\n      return SHIPS[props.id].color;\n    }\n  }};\n  opacity: ${props => {\n    return props.id === props.selectedId ? '0.4' : '1';\n  }};\n`;\n\nconst Cell = styled.div`\n  border: 1px solid black;\n  width: 1.5em;\n  height: 1.5em;\n  @media only screen and (min-width: 768px) {\n    width: 2em;\n    height: 2em;\n  }\n`;\n\n// Functional component\nconst Ship = props => {\n  const [, drag] = useDrag({\n    item: { type: ItemTypes.SHIP },\n    collect: monitor => ({\n      isDragging: !!monitor.isDragging(),\n    })\n  })\n\n  const generateShip = () => {\n    let ship = [];\n    for (let i = 0; i < props.length; i++) {\n      ship.push(<Cell key={i}></Cell>);\n    }\n    return ship;\n  };\n\n  const handleClick = () => {\n    props.setSelectedId(props.id);\n    props.setLength(props.length);\n  }\n\n  return (\n    <ShipContainer \n      ref={drag}\n      onClick={handleClick}\n      id={props.id}\n      selectedId={props.selectedId}\n      pShips={props.pShips}\n    >\n      {generateShip()}\n    </ShipContainer>\n  );\n};\n\n// Type validation\nShip.propTypes = {\n  key: PropTypes.number,\n  id: PropTypes.number,\n  selectedId: PropTypes.number,\n  length: PropTypes.number,\n  setSelectedId: PropTypes.func,\n  setLength: PropTypes.func,\n  pShips: PropTypes.array\n}\n\nexport default Ship;","import React from 'react';\nimport styled from 'styled-components';\nimport Ship from \"./ShipDisplay.js\";\nimport PropTypes from 'prop-types';\nimport ships from './SHIPS.js';\n\n// Styled components\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  border: 1 px solid green;\n  width: 100%;\n  margin-top: 20px;\n`;\n\nconst ShipRow = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  padding: 5px 10px;\n  margin: 8px 0;\n`;\n \n// Functional component\nconst ShipsContainer = (props) => {\n  const generateShips = () => {\n    return ships.map(ship => {\n      return (\n        <ShipRow key={ship.id}>\n          <Ship\n            id={ship.id}\n            length={ship.length}\n            setSelectedId={props.setSelectedId}\n            setLength={props.setLength}\n            selectedId={props.selectedId}\n            pShips={props.pShips}\n          />\n          <h2>{ship.name.toUpperCase()}</h2>\n        </ShipRow>\n      );\n    });\n  };\n\n  return (\n    <Container>\n      { generateShips() }\n    </Container>\n  )\n}\n\n// Type validation\nShipsContainer.propTypes = {\n  setSelectedId: PropTypes.func,\n  setLength: PropTypes.func,\n  selectedId: PropTypes.number,\n  pShips: PropTypes.array\n}\n\nexport default ShipsContainer;","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport SHIPS from './SHIPS.js';\nimport PropTypes from 'prop-types';\nimport { ItemTypes } from '../ItemTypes.js';\nimport { useDrag } from 'react-dnd';\n\n// Styled components\nconst PieceBox = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border: 3px dashed black;\n  width: 9em;\n  height: 9em;\n  @media only screen and (min-width: 768px) {\n    width: 12em;\n    height: 12em;\n  }\n`;\n\nconst Ship = styled.div`\n  display: flex;\n  flex-direction : ${props => {\n    return props.orientation === 'horizontal' ? 'row' : 'column';\n  }};\n  cursor: pointer;\n  border: 2px solid black;\n`;\n\nconst Tile = styled.div`\n  height: 1.5em;\n  width: 1.5em;\n  font-weight: bold;\n  @media only screen and (min-width: 768px) {\n    height: 2em;\n    width: 2em;\n  }\n  border: 1px solid black;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: ${props => props.color};\n`;\n\n// Functional component\nconst ShowPiece = (props)  => {\n  const [position, setPosition] = useState(null);\n  const id = props.selectedId;\n  const length = props.length;\n  const orientation = props.orientation;\n  const [, drag] = useDrag({\n    item: { \n      id,\n      length,\n      orientation,\n      position,\n      type: ItemTypes.SHIP\n    },\n    collect: monitor => ({\n      isDragging: !!monitor.isDragging(),\n    })\n  })\n\n  const handleMouseDown = (i) => {\n    setPosition(i); \n  }\n\n  let tiles;\n  const generateTiles = () => {\n    tiles = [];\n    const ship = SHIPS[props.selectedId];\n    for (let i = 0; i < props.length; i++) {\n      tiles.push(\n        <Tile\n          key={i}\n          color={ship.color}\n          index={i}\n          onMouseDown={() => handleMouseDown(i)}\n        >\n          {i === 0 ? \"😜\" : \"\"}\n        </Tile>\n      );\n    }\n    return tiles;\n  }\n\n  return (\n    <PieceBox>\n      {!props.pShips.includes(props.selectedId) && props.length > 0 &&\n        <Ship \n          ref={drag} \n          orientation={props.orientation}\n        >\n          {generateTiles()}\n        </Ship>\n      }\n    </PieceBox>\n  );\n}\n\n// Type validation\nShowPiece.propTypes = {\n  selectedId: PropTypes.number,\n  length: PropTypes.number,\n  orientation: PropTypes.string,\n  pShips: PropTypes.array\n}\n\nexport default ShowPiece;","import React from 'react';\nimport styled from 'styled-components';\nimport ShipsContainer from './ShipsContainer.js';\nimport PropTypes from 'prop-types';\nimport ShowPiece from './ShowPiece.js';\n\n// Styled components\nconst BankContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  border: 3px solid black;\n  padding: 20px 5px;\n  margin: 10px;\n  grid-row: 1 / span 2;\n  grid-column: 1 / span 1;\n  height: 80%;\n  width: 90%;\n  background: rgba(122, 140, 255, 0.69);\n\n  @media only screen and (min-width: 768px) {\n    height: 90%;\n  }\n`;\n\nconst H2 = styled.h2`\n  font-size: 2em;\n  font-weight: bold;\n`;\n\nconst OrientationButtons = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin: 15px 0;\n`;\n\nconst Button = styled.button`\n  margin: 0 10px;\n  font-size: 1em;\n  border: 2px solid black;\n  border-radius: 5px;\n  background: ${props => {\n    if (props.horizontal && props.orientation === 'horizontal') {\n      return 'yellow';\n    } else if (props.vertical && props.orientation === 'vertical') {\n      return 'yellow';\n    } else {\n      return 'none';\n    }\n  }};\n  cursor: pointer;\n`;\n\n// Function component\nconst ShipBank = (props) => { \n  return (\n    <BankContainer>\n      <H2>Ship Bank</H2>\n      <ShipsContainer \n        setSelectedId={props.setSelectedId}\n        setLength={props.setLength}\n        selectedId={props.selectedId}\n        pShips={props.pShips}\n      />\n      <OrientationButtons>\n        <Button \n          orientation={props.orientation} \n          horizontal\n          onClick={() => props.setOrientation('horizontal')}\n        >\n          Horizontal\n        </Button>\n        <Button \n          orientation={props.orientation} \n          vertical\n          onClick={() => props.setOrientation('vertical')}\n        >\n          Vertical\n        </Button>\n      </OrientationButtons>\n      <ShowPiece \n        selectedId={props.selectedId}\n        length={props.length}\n        orientation={props.orientation}\n        pShips={props.pShips}\n      />\n    </BankContainer>\n  )\n}\n\n// Type validation\nShipBank.propTypes = {\n  selectedId:     PropTypes.number,\n  length:         PropTypes.number,\n  orientation:    PropTypes.string,\n  pShips:         PropTypes.array,\n  setOrientation: PropTypes.func,\n  setSelectedId:  PropTypes.func,\n  setLength:      PropTypes.func\n}\n\nexport default ShipBank;","import React from 'react';\nimport styled from 'styled-components';\nimport SHIPS from './SHIPS.js';\nimport PropTypes from 'prop-types';\n\n// Styled component\nconst Ship = styled.div`\n  text-align: center;\n  margin: 5px 0;\n  border: 1px solid black;\n  background: ${props => props.sunk ? props.color : 'none'};\n  width: ${props => `${props.length * 3.1}em`};\n  font-size: 0.8em;\n  padding: 5px 1px;\n`;\n\n// Function component\nconst EnemyShip = (props) => {\n  const ship = SHIPS[props.id]; \n  return (\n    <Ship \n      sunk={props.sunk}\n      color={ship.color}\n      length={ship.length}\n    >\n      {`${ship.name.toUpperCase()} (${ship.length})`}\n    </Ship>\n  )\n}\n\n// Type validation\nEnemyShip.propTypes = {\n  sunk: PropTypes.bool,\n  id: PropTypes.number\n}\n\nexport default EnemyShip;","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport EnemyShip from './EnemyShip.js';\n\n// Styled component\nconst TrackingContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background: rgba(155, 255, 320, 0.3);\n  padding: 20px 10px;\n  border: 5px solid black;\n  width: 90%;\n  grid-area: 1 / 1 / 2 / 2;\n  margin-bottom: 20px;\n  @media only screen and (min-width: 768px) {\n    width: 100%;\n  }\n`;\n\nconst H2 = styled.h2`\n  font-size: 2em;\n`;\n\n// Function component\nconst ComputerBank = (props) => {\n  const enemyShips = props.ships.map(shipData => {\n    return (\n      <EnemyShip\n        key={shipData.ship.id}\n        id={shipData.ship.id}\n        sunk={shipData.ship.isSunk()}\n      />\n    )\n  })\n  \n  return (\n    <TrackingContainer>\n      <H2>Enemy Ships</H2>\n      { enemyShips }\n    </TrackingContainer>\n  )\n}\n\n// Type validation\nComputerBank.propTypes = {\n  ships: PropTypes.array,\n}\n\nexport  default ComputerBank;","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border: 5px solid black;\n  background: grey;\n  padding: 10px;\n`;\n\nconst Indicator = styled.div`\n  height: 0.8em;\n  width: 0.8em;\n  border-radius: 50%;\n  border: 4px solid black;\n  background: ${props => props.playerTurn ? 'yellow' : 'grey'};\n  margin: 0 8px;\n`;\n\nconst AttackIndicator = (props) => {\n  return (\n    <Container>\n      <h2>ATTACK</h2>\n      <Indicator playerTurn={props.playerTurn}></Indicator>\n    </Container>\n  )\n}\n\nAttackIndicator.propTypes = {\n  playerTurn: PropTypes.bool\n}\n\nexport default AttackIndicator;","import React from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border: 3px solid black;\n  background: lightgrey;\n  padding: 10px;\n  margin-top: 10px;\n  h1 {\n    margin-right: 20px;\n  }\n  p {\n    margin-right: 5px;\n  }\n`;\n\nconst Box = styled.div`\n  height: 2em;\n  width: 2em;\n  border: 2px solid black;\n  margin-right: 5px;\n  background: ${props =>\n    props.blue\n      ? \"radial-gradient(closest-side, blue, lightblue)\"\n      : \"radial-gradient(closest-side, red, pink)\"};\n`;\n\nconst Legend = () => {\n  return (\n    <Container>\n      <p>Miss</p>\n      <Box blue></Box>\n      <p>Hit</p>\n      <Box red></Box>\n    </Container>\n  )\n}\n\nexport default Legend;","import React, { useState, useEffect } from 'react';\nimport styled                         from 'styled-components';\nimport PropTypes                      from 'prop-types';\nimport Gameboard                      from '../logic/Gameboard.js';\nimport Player                         from '../logic/Player.js';\nimport Ship                           from '../logic/Ship.js';\nimport Board                          from './Board.js';\nimport ShipBank                       from './ShipBank.js';\nimport ComputerBank                   from './ComputerBank.js';\nimport AttackIndicator                from './AttackIndicator.js';\nimport Legend                         from './Legend.js';\n\n// Styled component\nconst GameContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  @media only screen and (min-width: 768px) {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 1fr 1fr;\n    margin: 15px;\n    justify-content: center;\n    align-items: center;\n  }\n\n  @media only screen and (min-width: 1024px) {\n    gap: 20px;\n  }\n`;\n\n// Function component\nconst PrimaryGame = (props) => {\n  const [player, setPlayer] =           useState(Player('Braxton'));\n  const [computer, setComputer] =       useState(Player('Computer'));\n  const [boardP, setBoardP] =           useState(Gameboard(0));\n  const [boardC, setBoardC] =           useState(Gameboard(1));\n  const [playerTurn, setPlayerTurn] =   useState(true);\n  const [selectedId, setSelectedId] =   useState(null);\n  const [length, setLength] =           useState(null);\n  const [orientation, setOrientation] = useState(\"horizontal\");\n  const [pShips, setPShips] =           useState([]);\n\n  const resetGame = () => {\n    setBoardP(prevBoard => {\n      prevBoard.reset();\n      return prevBoard;\n    });\n\n    setBoardC(prevBoard => {\n      prevBoard.reset();\n      return prevBoard;\n    });\n\n    setPlayer(prevPlayer => {\n      prevPlayer.reset();\n      return prevPlayer;\n    });\n\n    setComputer(prevComputer => {\n      prevComputer.reset();\n      return prevComputer;\n    });\n\n    setPlayerTurn(true);\n    setSelectedId(null);\n    setLength(null);\n    setOrientation('horizontal');\n    setPShips([]);\n  };\n\n  useEffect(() => {\n    if (isOver()) resetGame();\n  });\n\n  const handleClick = (coords, boardId) => {\n    boardP.allShipsPlaced() ? makeMove(coords, boardId) : (boardId === 0) && length > 0 && placeShip(coords);\n    if (boardP.allShipsPlaced() && !boardC.allShipsPlaced()) {\n      const tempBoard = {...boardC};\n      tempBoard.placeRandomShips();\n      setBoardC(tempBoard);\n    }\n  }\n\n  const handleDrop = (coords, boardId, position) => {\n    coords = orientation === 'horizontal' ? [coords[0], coords[1] - position] : [coords[0] - position, coords[1]];\n    if (boardId === 0 && length > 0) placeShip(coords);\n    if (boardP.allShipsPlaced() && !boardC.allShipsPlaced()) {\n      let tempBoard = {...boardC};\n      tempBoard.placeRandomShips();\n      setBoardC(tempBoard);\n    }\n  }\n\n  const placeShip = (coords) => {\n    const [row, col] = coords;\n    const ship = Ship(selectedId, length, orientation);\n    boardP.placeShip(ship, row, col);\n    const tempBoard = {...boardP};\n    setBoardP(tempBoard);\n    if (boardP.ships.length > pShips.length) {\n      const tempShips = [...pShips];\n      tempShips.push(ship.id);\n      setPShips(tempShips);\n    }\n  }\n\n  const makeMove = (coords, boardId) => {\n    if (playerTurn && boardId === 1) {\n      const board = { ...boardC };\n      if (player.attack(board, coords)) {\n        setBoardC(board);\n        setPlayerTurn(false);\n        computerPlay();\n      }\n    }\n  }\n\n  const computerPlay = () => {\n    setTimeout(() => {\n      const board = { ...boardP };\n      const coords = computer.generatePlay(board.board);\n      computer.attack(board, coords);\n      setBoardP(board);\n      setPlayerTurn(true)\n    }, 1500)\n  }\n\n  const isOver = () => {\n    if (boardP.allShipsPlaced() && (boardP.areAllSunk() || boardC.areAllSunk())) return true;\n    return false;\n  }\n\n  return (\n    <GameContainer>\n      {boardC.allShipsPlaced() && (\n        <>\n          <ComputerBank ships={boardC.ships} />\n          <div>\n            <AttackIndicator playerTurn={playerTurn} />\n            <Legend />\n          </div>\n        </>\n      )}\n      <Board\n        board={boardC}\n        handleClick={handleClick}\n        playerTurn={playerTurn}\n        computer\n      />\n      {!boardP.allShipsPlaced() && (\n        <ShipBank\n          selectedId={selectedId}\n          length={length}\n          orientation={orientation}\n          setOrientation={setOrientation}\n          setSelectedId={setSelectedId}\n          setLength={setLength}\n          pShips={pShips}\n        />\n      )}\n      <Board\n        board={boardP}\n        handleClick={handleClick}\n        pShips={pShips}\n        playerTurn={playerTurn}\n        handleDrop={handleDrop}\n      />\n      {isOver() && boardC.areAllSunk() && props.endGame(\"player\")}\n      {isOver() && boardP.areAllSunk() && props.endGame(\"computer\")}\n    </GameContainer>\n  );\n}\n\n// Type validation\nPrimaryGame.propTypes = {\n  endGame: PropTypes.func,\n}\n\nexport default PrimaryGame;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  height: 100vh;\n  text-align: center;\n`;\n\nconst H2 = styled.div`\n  font-size: 3em;\n  margin: 20px 0;\n`;\n\nconst Button = styled.button`\n  border: 2px solid black;\n  padding: 10px;\n  font-size: 1.2em;\n  border-radius: 8px;\n  background: blue;\n  color: white;\n  letter-spacing: 1.2px;\n  cursor: pointer;\n  margin: 20px 0;\n`;\n// Function component\nconst GameOver = (props) => {\n  return (\n    <Container>\n      <H2>GAME OVER</H2>\n      {props.winner === 'player' ? \n        <H2>You win!</H2> :\n        <H2>Computer wins...</H2>\n    }\n      <Button onClick={props.handleClick}>Play again</Button>\n    </Container>\n  )\n}\n\n// Type validation\nGameOver.propTypes = {\n  handleClick: PropTypes.func,\n  winner: PropTypes.string,\n}\n\nexport default GameOver;","import React from 'react';\nimport styled from 'styled-components';\n\nconst H1 = styled.h1`\n  font-size: 3em;\n  text-shadow: 1px 2px yellow;\n  margin: 10px;\n`;\n\nconst Header = () => {\n  return (\n    <H1>Battleship</H1>\n  )\n}\n\nexport default Header;","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Reset } from 'styled-reset';\nimport GlobalStyle from './GlobalStyle.js';\nimport Rules from './components/Rules.js';\nimport PrimaryGame from './components/PrimaryGame.js';\nimport GameOver from './components/GameOver.js';\nimport Header from './components/Header.js';\n\n// Styled component\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  /* padding: 20px 0 30px 0; */\n  height: 100%;\n  width: 100%;\n`;\n\n// Functional component\nconst App = () => {\n  const [viewRules, setViewRules] = useState(true);\n  const [playGame, setPlayGame] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [winner, setWinner] = useState(null);\n\n  const handleClick = () => {\n    setViewRules(false);\n    setPlayGame(true);\n    setGameOver(false);\n  }\n\n  const endGame = (champion) => {\n    setPlayGame(false);\n    setGameOver(true);\n    setWinner(champion)\n  }\n\n  return (\n    <Wrapper>\n      <Reset />\n      <GlobalStyle />\n      <Header />\n      {\n        viewRules && <Rules handleClick={handleClick} />\n      }\n      {\n        playGame && <PrimaryGame endGame={endGame} />\n      }\n      {\n        gameOver && \n        <GameOver \n          handleClick={handleClick} \n          winner={winner}\n        />\n      }\n    </Wrapper>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { DndProvider } from 'react-dnd';\nimport Backend from 'react-dnd-html5-backend';\nimport 'typeface-londrina-solid';\n\nReactDOM.render(\n  <DndProvider backend={Backend}>\n    <App />\n  </DndProvider>,\n  document.getElementById(\"root\")\n);\n\n"],"sourceRoot":""}